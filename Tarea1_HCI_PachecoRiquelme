{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d9b3d2a",
   "metadata": {},
   "source": [
    "# Trabajo Práctico 1\n",
    "## Herramientas computacionales para la investigación - MAE UdeSA 2022\n",
    "### Tomás Pacheco y Abigail Riquelme\n",
    "\n",
    "#### Fecha de entrega: 3 de julio de 2022"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "ce50f66c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Cargamos el paquete que vamos a usar.\n",
    "\n",
    "import pandas as pd "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "d0a4ad75",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Abrimos la base de datos.\n",
    "\n",
    "df = pd.read_csv('tarea.csv', sep=',')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "baeb4624",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   carat      cut color clarity  depth  table  price     x     y     z\n",
      "0   0.23    Ideal     E     SI2   61.5   55.0    326  3.95  3.98  2.43\n",
      "1   0.21  Premium     E     SI1   59.8   61.0    326  3.89  3.84  2.31\n",
      "2   0.23     Good     E     VS1   56.9   65.0    327  4.05  4.07  2.31\n",
      "3   0.29  Premium     I     VS2   62.4   58.0    334  4.20  4.23  2.63\n",
      "4   0.31     Good     J     SI2   63.3   58.0    335  4.34  4.35  2.75\n"
     ]
    }
   ],
   "source": [
    "# Punto 1\n",
    "\n",
    "# Leemos el archivo y mostramos las primeras cinco filas.\n",
    "\n",
    "print(pd.read_csv('tarea.csv', sep=',').head(5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "192de4f3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   carat      cut color clarity  depth  table  price     x     y     z\n",
      "0   0.23    Ideal     E     SI2   61.5   55.0    326  3.95  3.98  2.43\n",
      "1   0.21  Premium     E     SI1   59.8   61.0    326  3.89  3.84  2.31\n",
      "2   0.23     Good     E     VS1   56.9   65.0    327  4.05  4.07  2.31\n"
     ]
    }
   ],
   "source": [
    "# Punto 2\n",
    "\n",
    "# Ahora solo mostramos las primeras tres filas.\n",
    "\n",
    "print(pd.read_csv('tarea.csv', sep=',').head(3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "12dcb272",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0        E\n",
      "1        E\n",
      "2        E\n",
      "3        I\n",
      "4        J\n",
      "        ..\n",
      "53935    D\n",
      "53936    D\n",
      "53937    D\n",
      "53938    H\n",
      "53939    D\n",
      "Name: color, Length: 53940, dtype: object\n"
     ]
    }
   ],
   "source": [
    "# Punto 3 \n",
    "\n",
    "# Imprimimos el contenido de la variable 'color' como una serie.\n",
    "\n",
    "s = df.color\n",
    "print(s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "5a5daafc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      color clarity\n",
      "0         E     SI2\n",
      "1         E     SI1\n",
      "2         E     VS1\n",
      "3         I     VS2\n",
      "4         J     SI2\n",
      "...     ...     ...\n",
      "53935     D     SI1\n",
      "53936     D     SI1\n",
      "53937     D     SI1\n",
      "53938     H     SI2\n",
      "53939     D     SI2\n",
      "\n",
      "[53940 rows x 2 columns]\n"
     ]
    }
   ],
   "source": [
    "# Punto 4 \n",
    "\n",
    "# Creamos una serie de claridad-color.\n",
    "\n",
    "s2 = df[[\"color\", \"clarity\"]]\n",
    "print(s2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "40305e2d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(53940, 10)\n"
     ]
    }
   ],
   "source": [
    "# Punto 5 \n",
    "\n",
    "# Primero vemos la cantidad de filas y columnas con el comando .shape.\n",
    "\n",
    "print(df.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "1e6cd1ee",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "carat      float64\n",
      "cut         object\n",
      "color       object\n",
      "clarity     object\n",
      "depth      float64\n",
      "table      float64\n",
      "price        int64\n",
      "x          float64\n",
      "y          float64\n",
      "z          float64\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "# Vemos el tipo de dato de cada columna \n",
    "\n",
    "print(df.dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "15c05514",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          cut  color clarity\n",
      "count   53940  53940   53940\n",
      "unique      5      7       8\n",
      "top     Ideal      G     SI1\n",
      "freq    21551  11292   13065\n"
     ]
    }
   ],
   "source": [
    "# Punto 6 \n",
    "\n",
    "# Estadística descriptiva de dataframe pero solo las columnas que son del tipo 'objeto'\n",
    "\n",
    "print(df.describe(include=['object']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "8e0a4347",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       carat        cut color clarity  depth  table  price     x     y     z\n",
      "0       0.23      Ideal     E     SI2   61.5   55.0    326  3.95  3.98  2.43\n",
      "1       0.21    Premium     E     SI1   59.8   61.0    326  3.89  3.84  2.31\n",
      "2       0.23       Good     E     VS1   56.9   65.0    327  4.05  4.07  2.31\n",
      "3       0.29    Premium     I     VS2   62.4   58.0    334  4.20  4.23  2.63\n",
      "4       0.31       Good     J     SI2   63.3   58.0    335  4.34  4.35  2.75\n",
      "...      ...        ...   ...     ...    ...    ...    ...   ...   ...   ...\n",
      "53935   0.72      Ideal     D     SI1   60.8   57.0   2757  5.75  5.76  3.50\n",
      "53936   0.72       Good     D     SI1   63.1   55.0   2757  5.69  5.75  3.61\n",
      "53937   0.70  Very Good     D     SI1   62.8   60.0   2757  5.66  5.68  3.56\n",
      "53938   0.86    Premium     H     SI2   61.0   58.0   2757  6.15  6.12  3.74\n",
      "53939   0.75      Ideal     D     SI2   62.2   55.0   2757  5.83  5.87  3.64\n",
      "\n",
      "[53940 rows x 10 columns]\n",
      "       carat        cut color clarity  profundidad  table  precio     x     y  \\\n",
      "0       0.23      Ideal     E     SI2         61.5   55.0     326  3.95  3.98   \n",
      "1       0.21    Premium     E     SI1         59.8   61.0     326  3.89  3.84   \n",
      "2       0.23       Good     E     VS1         56.9   65.0     327  4.05  4.07   \n",
      "3       0.29    Premium     I     VS2         62.4   58.0     334  4.20  4.23   \n",
      "4       0.31       Good     J     SI2         63.3   58.0     335  4.34  4.35   \n",
      "...      ...        ...   ...     ...          ...    ...     ...   ...   ...   \n",
      "53935   0.72      Ideal     D     SI1         60.8   57.0    2757  5.75  5.76   \n",
      "53936   0.72       Good     D     SI1         63.1   55.0    2757  5.69  5.75   \n",
      "53937   0.70  Very Good     D     SI1         62.8   60.0    2757  5.66  5.68   \n",
      "53938   0.86    Premium     H     SI2         61.0   58.0    2757  6.15  6.12   \n",
      "53939   0.75      Ideal     D     SI2         62.2   55.0    2757  5.83  5.87   \n",
      "\n",
      "          z  \n",
      "0      2.43  \n",
      "1      2.31  \n",
      "2      2.31  \n",
      "3      2.63  \n",
      "4      2.75  \n",
      "...     ...  \n",
      "53935  3.50  \n",
      "53936  3.61  \n",
      "53937  3.56  \n",
      "53938  3.74  \n",
      "53939  3.64  \n",
      "\n",
      "[53940 rows x 10 columns]\n"
     ]
    }
   ],
   "source": [
    "# Punto 7\n",
    "\n",
    "# Imprimimos el data frame.\n",
    "print(df)\n",
    "\n",
    "# Cambiamos el nombre de las columnas.\n",
    "\n",
    "dfn = df.rename(columns={'depth':'profundidad', 'price':'precio'})\n",
    "\n",
    "# Volvemos a imprimir el data frame.\n",
    "print(dfn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "443b9cc8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       carat clarity  depth  table  price     x     y     z\n",
      "0       0.23     SI2   61.5   55.0    326  3.95  3.98  2.43\n",
      "1       0.21     SI1   59.8   61.0    326  3.89  3.84  2.31\n",
      "2       0.23     VS1   56.9   65.0    327  4.05  4.07  2.31\n",
      "3       0.29     VS2   62.4   58.0    334  4.20  4.23  2.63\n",
      "4       0.31     SI2   63.3   58.0    335  4.34  4.35  2.75\n",
      "...      ...     ...    ...    ...    ...   ...   ...   ...\n",
      "53935   0.72     SI1   60.8   57.0   2757  5.75  5.76  3.50\n",
      "53936   0.72     SI1   63.1   55.0   2757  5.69  5.75  3.61\n",
      "53937   0.70     SI1   62.8   60.0   2757  5.66  5.68  3.56\n",
      "53938   0.86     SI2   61.0   58.0   2757  6.15  6.12  3.74\n",
      "53939   0.75     SI2   62.2   55.0   2757  5.83  5.87  3.64\n",
      "\n",
      "[53940 rows x 8 columns]\n"
     ]
    }
   ],
   "source": [
    "# Punto 8 \n",
    "\n",
    "# Eliminamos la segunda y tercer columna.\n",
    "\n",
    "df3 = df.drop(df.columns[[1,2]], axis = 1)\n",
    "\n",
    "print(df3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "d900dbbd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       carat        cut color clarity  depth  table  price     x     y     z\n",
      "5       0.24  Very Good     J    VVS2   62.8   57.0    336  3.94   NaN  2.48\n",
      "6       0.24  Very Good     I    VVS1   62.3   57.0    336  3.95  3.98  2.47\n",
      "7       0.26  Very Good     H     SI1   61.9   55.0    337  4.07  4.11  2.53\n",
      "8       0.22       Fair     E     VS2   65.1   61.0    337  3.87  3.78  2.49\n",
      "9       0.23  Very Good     H     VS1   59.4   61.0    338  4.00  4.05  2.39\n",
      "...      ...        ...   ...     ...    ...    ...    ...   ...   ...   ...\n",
      "53935   0.72      Ideal     D     SI1   60.8   57.0   2757  5.75  5.76  3.50\n",
      "53936   0.72       Good     D     SI1   63.1   55.0   2757  5.69  5.75  3.61\n",
      "53937   0.70  Very Good     D     SI1   62.8   60.0   2757  5.66  5.68  3.56\n",
      "53938   0.86    Premium     H     SI2   61.0   58.0   2757  6.15  6.12  3.74\n",
      "53939   0.75      Ideal     D     SI2   62.2   55.0   2757  5.83  5.87  3.64\n",
      "\n",
      "[53934 rows x 10 columns]\n"
     ]
    }
   ],
   "source": [
    "# Punto 9 \n",
    "\n",
    "# Eliminamos múltiples filas a la vez.\n",
    "\n",
    "df4 = df.drop([0,1,2,3,4,44], axis = 0)\n",
    "\n",
    "print(df4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "85070d94",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3850          Fair\n",
      "51464         Fair\n",
      "51466         Fair\n",
      "10237         Fair\n",
      "10760         Fair\n",
      "           ...    \n",
      "7402     Very Good\n",
      "43101    Very Good\n",
      "16893    Very Good\n",
      "16898    Very Good\n",
      "21164    Very Good\n",
      "Name: cut, Length: 53940, dtype: object\n",
      "<class 'method'>\n"
     ]
    }
   ],
   "source": [
    "# Punto 10 \n",
    "\n",
    "# Ordenamos la columna 'cut' en orden ascendente.\n",
    "\n",
    "print(df.cut.sort_values(ascending=True))\n",
    "\n",
    "# Vemos cuál es el tipo de 'cut' usandolo así.\n",
    "\n",
    "print(type(df.cut.sort_values))\n",
    "\n",
    "# Es un método "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "1400a9f0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>carat</th>\n",
       "      <th>cut</th>\n",
       "      <th>color</th>\n",
       "      <th>clarity</th>\n",
       "      <th>depth</th>\n",
       "      <th>table</th>\n",
       "      <th>price</th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>z</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>27415</th>\n",
       "      <td>5.01</td>\n",
       "      <td>Fair</td>\n",
       "      <td>J</td>\n",
       "      <td>I1</td>\n",
       "      <td>65.5</td>\n",
       "      <td>59.0</td>\n",
       "      <td>18018</td>\n",
       "      <td>10.74</td>\n",
       "      <td>10.54</td>\n",
       "      <td>6.98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27630</th>\n",
       "      <td>4.50</td>\n",
       "      <td>Fair</td>\n",
       "      <td>J</td>\n",
       "      <td>I1</td>\n",
       "      <td>65.8</td>\n",
       "      <td>58.0</td>\n",
       "      <td>18531</td>\n",
       "      <td>10.23</td>\n",
       "      <td>10.16</td>\n",
       "      <td>6.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27130</th>\n",
       "      <td>4.13</td>\n",
       "      <td>Fair</td>\n",
       "      <td>H</td>\n",
       "      <td>I1</td>\n",
       "      <td>64.8</td>\n",
       "      <td>61.0</td>\n",
       "      <td>17329</td>\n",
       "      <td>10.00</td>\n",
       "      <td>9.85</td>\n",
       "      <td>6.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25999</th>\n",
       "      <td>4.01</td>\n",
       "      <td>Premium</td>\n",
       "      <td>J</td>\n",
       "      <td>I1</td>\n",
       "      <td>62.5</td>\n",
       "      <td>62.0</td>\n",
       "      <td>15223</td>\n",
       "      <td>10.02</td>\n",
       "      <td>9.94</td>\n",
       "      <td>6.24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25998</th>\n",
       "      <td>4.01</td>\n",
       "      <td>Premium</td>\n",
       "      <td>I</td>\n",
       "      <td>I1</td>\n",
       "      <td>61.0</td>\n",
       "      <td>61.0</td>\n",
       "      <td>15223</td>\n",
       "      <td>10.14</td>\n",
       "      <td>10.10</td>\n",
       "      <td>6.17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31592</th>\n",
       "      <td>0.20</td>\n",
       "      <td>Premium</td>\n",
       "      <td>E</td>\n",
       "      <td>VS2</td>\n",
       "      <td>59.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>367</td>\n",
       "      <td>3.81</td>\n",
       "      <td>3.78</td>\n",
       "      <td>2.24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31591</th>\n",
       "      <td>0.20</td>\n",
       "      <td>Premium</td>\n",
       "      <td>E</td>\n",
       "      <td>VS2</td>\n",
       "      <td>59.8</td>\n",
       "      <td>62.0</td>\n",
       "      <td>367</td>\n",
       "      <td>3.79</td>\n",
       "      <td>3.77</td>\n",
       "      <td>2.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31601</th>\n",
       "      <td>0.20</td>\n",
       "      <td>Premium</td>\n",
       "      <td>D</td>\n",
       "      <td>VS2</td>\n",
       "      <td>61.7</td>\n",
       "      <td>60.0</td>\n",
       "      <td>367</td>\n",
       "      <td>3.77</td>\n",
       "      <td>3.72</td>\n",
       "      <td>2.31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>0.20</td>\n",
       "      <td>Premium</td>\n",
       "      <td>E</td>\n",
       "      <td>SI2</td>\n",
       "      <td>60.2</td>\n",
       "      <td>62.0</td>\n",
       "      <td>345</td>\n",
       "      <td>3.79</td>\n",
       "      <td>3.75</td>\n",
       "      <td>2.27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31596</th>\n",
       "      <td>0.20</td>\n",
       "      <td>Premium</td>\n",
       "      <td>F</td>\n",
       "      <td>VS2</td>\n",
       "      <td>62.6</td>\n",
       "      <td>59.0</td>\n",
       "      <td>367</td>\n",
       "      <td>3.73</td>\n",
       "      <td>3.71</td>\n",
       "      <td>2.33</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>53940 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       carat      cut color clarity  depth  table  price      x      y     z\n",
       "27415   5.01     Fair     J      I1   65.5   59.0  18018  10.74  10.54  6.98\n",
       "27630   4.50     Fair     J      I1   65.8   58.0  18531  10.23  10.16  6.72\n",
       "27130   4.13     Fair     H      I1   64.8   61.0  17329  10.00   9.85  6.43\n",
       "25999   4.01  Premium     J      I1   62.5   62.0  15223  10.02   9.94  6.24\n",
       "25998   4.01  Premium     I      I1   61.0   61.0  15223  10.14  10.10  6.17\n",
       "...      ...      ...   ...     ...    ...    ...    ...    ...    ...   ...\n",
       "31592   0.20  Premium     E     VS2   59.0   60.0    367   3.81   3.78  2.24\n",
       "31591   0.20  Premium     E     VS2   59.8   62.0    367   3.79   3.77  2.26\n",
       "31601   0.20  Premium     D     VS2   61.7   60.0    367   3.77   3.72  2.31\n",
       "14      0.20  Premium     E     SI2   60.2   62.0    345   3.79   3.75  2.27\n",
       "31596   0.20  Premium     F     VS2   62.6   59.0    367   3.73   3.71  2.33\n",
       "\n",
       "[53940 rows x 10 columns]"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Punto 11 \n",
    "\n",
    "# Ordenamos de forma descendente por la variable 'carat'.\n",
    "\n",
    "df.sort_values(by = 'carat', ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "4887a7dd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       carat        cut color clarity  depth  table  price     x      y      z\n",
      "11778   1.83       Fair     J      I1   70.0   58.0   5083  7.34   7.28   5.12\n",
      "13002   2.14       Fair     J      I1   69.4   57.0   5405  7.74   7.70   5.36\n",
      "13118   2.15       Fair     J      I1   65.5   57.0   5430  8.01   7.95   5.23\n",
      "13562   1.96       Fair     F      I1   66.6   60.0   5554  7.59   7.56   5.04\n",
      "13757   2.22       Fair     J      I1   66.7   56.0   5607  8.04   8.02   5.36\n",
      "...      ...        ...   ...     ...    ...    ...    ...   ...    ...    ...\n",
      "27748   2.00  Very Good     G     SI1   63.5   56.0  18818  7.90   7.97   5.04\n",
      "27749   2.29    Premium     I     VS2   60.8   60.0  18823  8.50   8.47   5.16\n",
      "48410   0.51  Very Good     E     VS1   61.8   54.7   1970  5.12   5.15  31.80\n",
      "49189   0.51      Ideal     E     VS1   61.8   55.0   2075  5.15  31.80   5.12\n",
      "49905   0.50  Very Good     G    VVS1   63.7   58.0   2180  5.01   5.04   5.06\n",
      "\n",
      "[1457 rows x 10 columns]\n"
     ]
    }
   ],
   "source": [
    "# Punto 12\n",
    "\n",
    "# Filtramos las filas en las que x>5, y>5 y z>5.\n",
    "\n",
    "print(df[(df.x > 5) & (df.y>5) & (df.z>5)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "694d8bd4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       carat        cut color clarity  depth  table  price     x     y     z\n",
      "64      0.42    Premium     I     SI2   61.5   59.0    552  4.78  4.84  2.96\n",
      "90      0.70      Ideal     E     SI1   62.5   57.0   2757  5.70  5.72  3.57\n",
      "91      0.86       Fair     E     SI2   55.1   69.0   2757  6.45  6.33  3.52\n",
      "92      0.70      Ideal     G     VS2   61.6   56.0   2757  5.70  5.67  3.50\n",
      "93      0.71  Very Good     E     VS2   62.4   57.0   2759  5.68  5.73  3.56\n",
      "...      ...        ...   ...     ...    ...    ...    ...   ...   ...   ...\n",
      "53935   0.72      Ideal     D     SI1   60.8   57.0   2757  5.75  5.76  3.50\n",
      "53936   0.72       Good     D     SI1   63.1   55.0   2757  5.69  5.75  3.61\n",
      "53937   0.70  Very Good     D     SI1   62.8   60.0   2757  5.66  5.68  3.56\n",
      "53938   0.86    Premium     H     SI2   61.0   58.0   2757  6.15  6.12  3.74\n",
      "53939   0.75      Ideal     D     SI2   62.2   55.0   2757  5.83  5.87  3.64\n",
      "\n",
      "[39549 rows x 10 columns]\n"
     ]
    }
   ],
   "source": [
    "# Punto 13\n",
    "\n",
    "# Filtramos las filas que solo muestran 'carat' mayor a 0.4 usando un loop.\n",
    "\n",
    "count = 0 # Definimos un contador.\n",
    "list1 = [] # Definimos una lista vacía.\n",
    "\n",
    "for x in df.carat: #Para cada una de las filas de la base de datos, toma el valor de la variable 'carat'\n",
    "    if x > 0.4: # Si este valor es mayor a 0.4\n",
    "        list1.append(count) # Appendea a la lista1 el contador, que sería el número de fila\n",
    "    else: # En caso de que sea menor\n",
    "        None # No hace nada\n",
    "    count += 1 # Sumamos 1 al contador para en la próxima interación referirse a la siguiente fila\n",
    " \n",
    "# Con el siguiente comando lo que hacemos es imprimir todas las filas cuyos índices estén en la lista1, que son \n",
    "# las que cumplen con la condición especificada. Mostramos todas las columnas.\n",
    "print(df.iloc[list1, :])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "3dc52571",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       carat      cut color clarity  depth  table  price     x     y     z\n",
      "0       0.23    Ideal     E     SI2   61.5   55.0    326  3.95  3.98  2.43\n",
      "1       0.21  Premium     E     SI1   59.8   61.0    326  3.89  3.84  2.31\n",
      "3       0.29  Premium     I     VS2   62.4   58.0    334  4.20  4.23  2.63\n",
      "11      0.23    Ideal     J     VS1   62.8   56.0    340  3.93  3.90  2.46\n",
      "12      0.22  Premium     F     SI1   60.4   61.0    342  3.88  3.84  2.33\n",
      "...      ...      ...   ...     ...    ...    ...    ...   ...   ...   ...\n",
      "53931   0.71  Premium     F     SI1   59.8   62.0   2756  5.74  5.73  3.43\n",
      "53934   0.72  Premium     D     SI1   62.7   59.0   2757  5.69  5.73  3.58\n",
      "53935   0.72    Ideal     D     SI1   60.8   57.0   2757  5.75  5.76  3.50\n",
      "53938   0.86  Premium     H     SI2   61.0   58.0   2757  6.15  6.12  3.74\n",
      "53939   0.75    Ideal     D     SI2   62.2   55.0   2757  5.83  5.87  3.64\n",
      "\n",
      "[35342 rows x 10 columns]\n"
     ]
    }
   ],
   "source": [
    "# Punto 14\n",
    "\n",
    "# Filtramos las filas que son Premium o Ideal.\n",
    "\n",
    "print(df[(df.cut == 'Premium') | (df.cut == 'Ideal')])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "078dd3f0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "count    53940.000000\n",
      "mean         0.797940\n",
      "std          0.474011\n",
      "min          0.200000\n",
      "25%          0.400000\n",
      "50%          0.700000\n",
      "75%          1.040000\n",
      "max          5.010000\n",
      "Name: carat, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Punto 15\n",
    "\n",
    "# Calculamos las estadísticas descriptivas de la variable 'carat'.\n",
    "\n",
    "print(df['carat'].describe())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "acf7d3ae",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "carat       0.797940\n",
      "depth      61.749405\n",
      "table      57.457184\n",
      "price    3932.799722\n",
      "x           5.731157\n",
      "y           5.734559\n",
      "z           3.538734\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Punto 16\n",
    "\n",
    "# Calculamos la media de cada columna numérica.\n",
    "\n",
    "print(df.mean(numeric_only = True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "96d6bf9a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cut\n",
      "Fair         4358.757764\n",
      "Good         3928.864452\n",
      "Ideal        3457.541970\n",
      "Premium      4584.257704\n",
      "Very Good    3981.759891\n",
      "Name: price, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Punto 17\n",
    "\n",
    "# Calculamos la media del precio para cada uno de los valores de 'cut'.\n",
    "\n",
    "print(df.groupby('cut').price.mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "7fc6cd5d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           count  min    max\n",
      "cut                         \n",
      "Fair        1610  337  18574\n",
      "Good        4906  327  18788\n",
      "Ideal      21551  326  18806\n",
      "Premium    13791  326  18823\n",
      "Very Good  12082  336  18818\n"
     ]
    }
   ],
   "source": [
    "# Punto 18\n",
    "\n",
    "# Calculamos la cantidad, el mínimo y el máximo precio para cada valor de 'cut'.\n",
    "\n",
    "print(df.groupby('cut').price.agg(['count','min', 'max']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "cf2591b0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Ideal' 'Premium' 'Good' 'Very Good' 'Fair']\n"
     ]
    }
   ],
   "source": [
    "# Punto 19\n",
    "\n",
    "# Utilizando .unique(), vemos los valores que puede tomar la variable 'cut'.\n",
    "\n",
    "print(df.cut.unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "6537b1b1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ideal        21551\n",
      "Premium      13791\n",
      "Very Good    12082\n",
      "Good          4906\n",
      "Fair          1610\n",
      "Name: cut, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Punto 20\n",
    "\n",
    "# Contamos la cantidad de veces que aparece cada uno de los valores de la variable 'cut'.\n",
    "\n",
    "print(df.cut.value_counts(normalize = False))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "f4dad41a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ideal        39.953652\n",
      "Premium      25.567297\n",
      "Very Good    22.398962\n",
      "Good          9.095291\n",
      "Fair          2.984798\n",
      "Name: cut, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Punto 21\n",
    "\n",
    "# Calculamos el porcentaje de cada uno de los valores de 'cut' utilizando la opción 'normalize = True'\n",
    "\n",
    "print(df.cut.value_counts(normalize = True)*100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "aa1c54e2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "color         D     E     F     G     H     I    J\n",
      "cut                                               \n",
      "Fair        163   224   312   314   303   175  119\n",
      "Good        662   933   909   871   702   522  307\n",
      "Ideal      2834  3903  3826  4884  3115  2093  896\n",
      "Premium    1603  2337  2331  2924  2360  1428  808\n",
      "Very Good  1513  2400  2164  2299  1824  1204  678\n"
     ]
    }
   ],
   "source": [
    "# Punto 22\n",
    "\n",
    "# Hacemos una tabla de doble entrada de las variables 'cut' y 'color' utilizando la función .crosstab().\n",
    "\n",
    "print(pd.crosstab(df.cut, df.color))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "073b2210",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Para hacer los gráficos importaremos otra librería, matplotbib:\n",
    "\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "831d1f06",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Punto 23\n",
    "\n",
    "# Hacemos un histograma de frecuencias de la variable 'carat':\n",
    "\n",
    "df.carat.plot(kind = 'hist', \n",
    "                 title = \"Histograma de 'carat' \", \n",
    "                 color = '#AFCF57',\n",
    "                 bins = 25)\n",
    "plt.ylabel(\"Frecuencia\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "070189ae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([0, 1, 2, 3, 4]),\n",
       " [Text(0, 0, 'Ideal'),\n",
       "  Text(1, 0, 'Premium'),\n",
       "  Text(2, 0, 'Very Good'),\n",
       "  Text(3, 0, 'Good'),\n",
       "  Text(4, 0, 'Fair')])"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Punto 24\n",
    "\n",
    "# Hacemos un gráfico de barras de la variable 'cut'. Utilizamos la función .value_counts() para que compute\n",
    "# la frecuencia de cada uno de los valores. Lo que hace el comando .plot es graficar esta tabla de frecuencias\n",
    "# para cada valor de 'cut'.\n",
    "\n",
    "df.cut.value_counts().plot(kind = 'bar', \n",
    "                 title = \"Gráfico de barras de 'cut' \", \n",
    "                 color = '#FFCF56')\n",
    "plt.ylabel(\"Frecuencia\");\n",
    "plt.xticks(rotation='horizontal')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "83d1b469",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "carat      0\n",
      "cut        0\n",
      "color      0\n",
      "clarity    0\n",
      "depth      0\n",
      "table      0\n",
      "price      0\n",
      "x          0\n",
      "y          1\n",
      "z          0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Punto 25\n",
    "\n",
    "# Contamos la cantidad de missings que hay en la base de datos:\n",
    "\n",
    "print(df.isnull().sum())\n",
    "\n",
    "# Vemos que solo una variable 'y' tiene un missing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "616340c5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(53940, 10)\n",
      "(53939, 10)\n"
     ]
    }
   ],
   "source": [
    "# Punto 26\n",
    "\n",
    "# Contamos la cantidad de filas y columnas tal como hicimos antes.\n",
    "\n",
    "print(df.shape)\n",
    "\n",
    "# Borramos las observaciones que tienen missing en alguna de las columnas.\n",
    "\n",
    "df4 = df.dropna(how='any')\n",
    "print(df4.shape)\n",
    "\n",
    "# Borró la unica fila que tiene un missing, como vimos antes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "c7341224",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(53940, 10)\n"
     ]
    }
   ],
   "source": [
    "# Punto 27\n",
    "\n",
    "# Borramos las filas si faltan todos los valores.\n",
    "\n",
    "df5 = df.dropna(how='all')\n",
    "print(df5.shape)\n",
    "\n",
    "# Acá se puede ver que no borró nada (sigue teniendo la misma cantidad de filas que la base original)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "2bc928ca",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   carat        cut color clarity  depth  table  price     x     y     z\n",
      "0   0.23      Ideal     E     SI2   61.5   55.0    326  3.95  3.98  2.43\n",
      "2   0.23       Good     E     VS1   56.9   65.0    327  4.05  4.07  2.31\n",
      "5   0.24  Very Good     J    VVS2   62.8   57.0    336  3.94   NaN  2.48\n"
     ]
    }
   ],
   "source": [
    "# Punto 28\n",
    "\n",
    "# Con .loc[] solo mostramos las filas 0,2 y 5 para todas las columnas\n",
    "\n",
    "print(df.loc[[0,2,5],:])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "9d2b0f8c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  color  price\n",
      "0     E    326\n",
      "1     E    326\n",
      "2     E    327\n"
     ]
    }
   ],
   "source": [
    "# Punto 29\n",
    "\n",
    "# También utilizando .loc[] nos quedamos con las primeras tres filas (de 0 a 2) y solo mostramos las columnas de color\n",
    "# y precio\n",
    "\n",
    "print(df.loc[range(0,3), ['color', 'price']])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "89caf017",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      color\n",
      "1         E\n",
      "3         I\n",
      "12        F\n",
      "14        E\n",
      "15        E\n",
      "...     ...\n",
      "53928     E\n",
      "53930     E\n",
      "53931     F\n",
      "53934     D\n",
      "53938     H\n",
      "\n",
      "[13791 rows x 1 columns]\n"
     ]
    }
   ],
   "source": [
    "# Punto 30\n",
    "\n",
    "# Mostramos la columna 'color' para aquellas filas cuyo valor de 'cut' sea 'Premium'. Esto lo hacemos con .loc[]\n",
    "# y utilizamos el operador lógico ==.\n",
    "\n",
    "print(df.loc[df['cut'] == 'Premium', ['color']])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "782de346",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       carat      cut color clarity  depth  table  price     x     y     z\n",
      "37712   0.34  Premium     H    VVS1   61.1   59.0    995  4.52  4.48  2.75\n",
      "6341    1.00     Fair     G     VS2   44.0   53.0   4032  6.31  6.24  4.12\n",
      "30991   0.37  Premium     F     VS2   59.8   59.0    746  4.63  4.66  2.78\n",
      "16929   1.01     Good     G     VS1   63.8   57.0   6759  6.35  6.38  4.06\n",
      "1810    1.01     Fair     I     SI2   66.1   58.0   3054  6.21  6.04  4.05\n"
     ]
    }
   ],
   "source": [
    "# Punto 31\n",
    "\n",
    "# Obtenemos 5 filas de la muestra al azar con el comando .sample()\n",
    "\n",
    "print(df.sample(5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "9874994c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       carat        cut color clarity  depth  table  price     x     y     z\n",
      "31598   0.20  Very Good     E     VS2   63.4   59.0    367  3.74  3.71  2.36\n",
      "23970   2.01    Premium     J     SI2   62.4   59.0  12105  8.05  8.10  5.04\n",
      "38321   0.50  Very Good     F     SI2   62.9   57.0   1020  5.02  5.06  3.17\n",
      "46695   0.50       Good     G    VVS2   64.1   56.0   1791  5.06  5.02  3.23\n",
      "10355   1.04      Ideal     F     SI1   62.2   57.0   4770  6.50  6.40  4.01\n",
      "...      ...        ...   ...     ...    ...    ...    ...   ...   ...   ...\n",
      "15343   1.01  Very Good     F     VS2   61.7   57.0   6159  6.39  6.44  3.96\n",
      "27408   2.16      Ideal     G     SI2   62.5   54.2  18001  8.23  8.27  5.16\n",
      "36833   0.30      Ideal     E      IF   62.2   55.0    957  4.32  4.36  2.70\n",
      "1739    0.32      Ideal     H     VS1   60.2   56.0    561  4.44  4.49  2.69\n",
      "38483   0.42    Premium     F     VS1   60.9   59.0   1031  4.80  4.85  2.94\n",
      "\n",
      "[40455 rows x 10 columns]\n"
     ]
    }
   ],
   "source": [
    "# Punto 32\n",
    "\n",
    "# Generamos una muestra del 75% de las filas sin reemplazo. Nuevamente hacemos esto con el comando .sample().\n",
    "# Utilizamos la semilla 444 para que se puedan replicar los mismos resultados.\n",
    "\n",
    "print(df.sample(frac = 0.75, random_state = 444, replace = False))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "613b0b5d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "146\n"
     ]
    }
   ],
   "source": [
    "# Punto 33\n",
    "\n",
    "# Cotamos los duplicados usando duplicated y los sumamos:\n",
    "\n",
    "print(df.duplicated().sum())\n",
    "\n",
    "# Son 146 las filas duplicadas.\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
